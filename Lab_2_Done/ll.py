# -*- coding: utf-8 -*-
"""ll.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1onWGs87pYPSWnNCqOyAgJFtV3MXimxpH
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !wget https://www.dropbox.com/scl/fi/gwssm0f77en2nuiu34o5m/MSK_Price_train.csv?rlkey=vg1hhva3yaxsvo3zl1flgfhi9&dl=0
# !wget https://www.dropbox.com/scl/fi/4fbkx0r16yjemr245f848/MSK_Price_valid.csv?rlkey=be7phwzd5d4py8kiqwdfiuw8u&dl=0

pip install catboost

import pandas as pd
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt
import xgboost as xgb
import numpy as np
import catboost
from catboost import CatBoostRegressor
from catboost import Pool
from catboost import cv

df = pd.read_csv('MSK_Price_train.csv')
df_test = pd.read_csv('MSK_Price_valid.csv')

df.head()

del df['Unnamed: 0']
del df_test['Unnamed: 0']

"""### Перевод столбца Metro station в lower"""

df['Metro station'] = df['Metro station'].str.lower().str.strip()
df_test['Metro station'] = df_test['Metro station'].str.lower().str.strip()

"""### Факторизация"""

columns_names = ['Apartment type', 'Metro station', 'Region', 'Renovation']
df[columns_names] = df[columns_names].apply(lambda x: pd.factorize(x)[0])
df_test[columns_names] = df_test[columns_names].apply(lambda x: pd.factorize(x)[0])

df = df[(df['Price'] < 1000000000)]
df.reset_index(inplace=True)
del df['index']

df = df[(df['Price'] > 2300000)]
df.reset_index(inplace=True)
del df['index']

df = df[(df['Number of rooms'] < 7)]
df.reset_index(inplace=True)
del df['index']

df = df[(df['Floor'] < 40)]
df.reset_index(inplace=True)
del df['index']

df = df[(df['Number of floors'] < 60)]
df.reset_index(inplace=True)
del df['index']

"""### Добавление новых признаков"""

df

def minutes_metro_to_category(minutes):
  if  minutes < 10.0 : return 0
  elif minutes <= 30.0 : return 1
  else : return 2

df['Distance to metro']=df['Minutes to metro'].apply(minutes_metro_to_category)
df_test['Distance to metro']=df_test['Minutes to metro'].apply(minutes_metro_to_category)

del df['Minutes to metro']
del df_test['Minutes to metro']

df.reset_index(inplace=True, drop=True)
df_test.reset_index(inplace=True, drop=True)

# def floor_category_func(floor_category):
#   if  floor_category < 0.2 : return 0
#   elif floor_category <= 0.9 : return 1
#   else : return 2

def living_area_cat(living_area):
  if  living_area < 0.5 : return 0
  elif living_area <= 0.9 : return 1
  else : return 2

df['Living Area cat'] = (df['Living area']/df['Area']).apply(living_area_cat)
df_test['Living Area cat'] = (df_test['Living area']/df_test['Area']).apply(living_area_cat)

# df['Floor_category'] = (df['Floor']/df['Number of floors']).apply(floor_category_func)
# df_test['Floor_category'] = (df_test['Floor']/df_test['Number of floors']).apply(floor_category_func)

# del df['Floor']
# del df_test['Floor']
# del df['Number of floors']
# del df_test['Number of floors']

# del df['Area']
# del df_test['Area']
# df.reset_index(inplace=True, drop=True)
# df_test.reset_index(inplace=True, drop=True)

# df['livArea/num_r'] = df['Living area'] / (df['Number of rooms'] + 1)
# df_test['livArea/num_r'] = df_test['Living area'] / (df_test['Number of rooms'] + 1)
# df['Apartment type for Region'] = df['Apartment type'] + df['Region']
# df_test['Apartment type for Region'] = df_test['Apartment type'] + df_test['Region']
# df_test['Ratio of floors'] = df_test['Floor'] / df_test['Number of floors']
# df['Ratio of floors'] = df['Floor'] / df['Number of floors']

del df['Kitchen area']
del df['Living area']
# del df['Region']
del df['Metro station']
del df['Renovation']
df.reset_index(inplace=True, drop=True)

del df_test['Kitchen area']
del df_test['Living area']
del df_test['Metro station']
# del df_test['Region']
del df_test['Renovation']
df_test.reset_index(inplace=True, drop=True)

"""### Настройка гиперпараметров"""

df

df_test

# from matplotlib import pyplot as plt
# df['Number of floors'].plot(kind='hist', title='Number of floors')
# plt.gca().spines[['top', 'right']].set_visible(False)

# from matplotlib import pyplot as plt
# df['Floor'].plot(kind='hist', figsize=(8, 4), title='Floor')
# plt.gca().spines[['top', 'right']].set_visible(False)

# from matplotlib import pyplot as plt
# df.plot(kind='scatter', x='Number of rooms', y='Area', s=32, alpha=.8)
# plt.gca().spines[['top', 'right',]].set_visible(False)

# from matplotlib import pyplot as plt
# df['Price'].plot(kind='line', figsize=(8, 4), title='Price')
# plt.gca().spines[['top', 'right']].set_visible(False)

"""### Построение модели"""

train_values = df['Price']
train_points = df.drop('Price', axis=1)
test_values = df_test['Price']
test_points = df_test.drop('Price', axis=1)

xg_reg = xgb.XGBRegressor(
                          learning_rate = 0.04,
                          max_depth = 9,
                          alpha= 10,
                          n_estimators = 2000,
                      )
#eval_metric="mae", eval_set=[(train_points, train_values), (test_points, test_values)]
xg_reg.fit(train_points, train_values)
xgb_predict = xg_reg.predict(test_points)
print(mean_absolute_error(test_values, xgb_predict))

# results = xg_reg.evals_result()
# epochs = len(results['validation_0']['mae'])
# x_axis = range(0, epochs)

# import matplotlib.pyplot as plt
# fig, ax = plt.subplots()
# ax.plot(x_axis, results['validation_0']['mae'], label='Train MAE')
# ax.plot(x_axis, results['validation_1']['mae'], label='Test MAE')
# ax.legend()
# plt.ylabel('MAE')
# plt.title('XGBoost MAE')
# plt.show()

from catboost import CatBoostRegressor

clf = CatBoostRegressor(
    # iterations=500,
    learning_rate=0.15,
    depth=9,
    # loss_function='MAE'
)
clf.fit(train_points, train_values)
test_predict_cat = clf.predict(test_points)
print(mean_absolute_error(test_values, test_predict_cat))