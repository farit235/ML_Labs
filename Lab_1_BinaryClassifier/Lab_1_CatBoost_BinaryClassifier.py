# -*- coding: utf-8 -*-
"""Lab_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ar0KxR-EfpHn4aIay5-XTVfTJ_QgDl1p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import copy
from sklearn import ensemble
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !wget https://www.dropbox.com/scl/fi/rz8xmydm1h3bpgjjm30jd/bank_train.csv?rlkey=rylj5xs1icbfokyabtnqo5gdv&dl=0
# !wget https://www.dropbox.com/scl/fi/05p2v6pw76tjf7c21rcyb/bank_valid.csv?rlkey=ifbgda9mj7ybbgl2txnzjq9g1&dl=0

df = pd.read_csv('bank_train.csv', encoding='iso-8859-1')
del df["Unnamed: 0"]
df.isnull().any()

df.info()

df.head()

names = ['Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4', 'Cred_Bal_Sal', 'Bal_sal', 'Tenure_Age', 'EstimatedSalary']
for name in names:
    df[name] = pd.factorize(df[name])[0]
df.head()

df_valid = pd.read_csv('bank_valid.csv', encoding='iso-8859-1')
del df_valid["Unnamed: 0"]
df_valid.isnull().any()
names = ['Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4', 'Cred_Bal_Sal', 'Bal_sal', 'Tenure_Age', 'EstimatedSalary']
for name in names:
    df_valid[name] = pd.factorize(df_valid[name])[0]
df_valid.head()

X = df.drop(columns=['Exited', 'Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4', 'Cred_Bal_Sal', 'Bal_sal', 'Tenure_Age', 'EstimatedSalary'])
y = df['Exited']
X_valid = df_valid.drop(columns=['Exited', 'Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4', 'Cred_Bal_Sal', 'Bal_sal', 'Tenure_Age', 'EstimatedSalary'])
y_valid = df_valid['Exited']


# Разделение на обучающий и тестовый наборы
X_train, y_train = X, y

# Масштабирование признаков
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X)
X_test_scaled = scaler.transform(X_valid)

# Обучение модели случайного леса

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Прогнозирование на тестовом наборе
y_pred = model.predict(X_test_scaled)

# Оценка модели
print("Accuracy:", accuracy_score(y_valid, y_pred))
print(classification_report(y_valid, y_pred))

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from catboost import CatBoostClassifier
import time

df['Cred_Bal_Sal']= df['CreditScore']*df['Balance']/df['EstimatedSalary']
df['Bal_sal']=df['Balance']/df['EstimatedSalary']
df['Tenure_Age']=df['Tenure']/df['Age']

X = df.drop(columns=['Exited', 'Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4', 'Bal_sal', 'Tenure_Age', 'EstimatedSalary'])
y = df['Exited']
X_valid = df_valid.drop(columns=['Exited', 'Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4', 'Bal_sal', 'Tenure_Age', 'EstimatedSalary'])
y_valid = df_valid['Exited']


X_train, y_train = X, y
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X)
X_test_scaled = scaler.transform(X_valid)

model = CatBoostClassifier(random_state=42, max_depth=6, iterations=400, l2_leaf_reg=3, learning_rate=0.1)
model.fit(X_train_scaled, y_train)

t1 = time.time()
y_pred = model.predict(X_test_scaled)
t2 = time.time() - t1
print("Prediction time: " + str(t2))
print("Accuracy:", accuracy_score(y_valid, y_pred))
print(classification_report(y_valid, y_pred))

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from catboost import CatBoostClassifier
import time

df = pd.read_csv('bank_train.csv', encoding='iso-8859-1')
del df["Unnamed: 0"]
df.isnull().any()
df_valid = pd.read_csv('bank_valid.csv', encoding='iso-8859-1')
del df_valid["Unnamed: 0"]
df_valid.isnull().any()

df['Cred_Bal_Sal'] = pd.to_numeric(df['Cred_Bal_Sal'], errors='coerce')  # coerce errors will convert non-numeric values to NaN
df['Bal_sal'] = pd.to_numeric(df['Bal_sal'], errors='coerce')
df['Tenure_Age'] = pd.to_numeric(df['Tenure_Age'], errors='coerce')
df['EstimatedSalary'] = pd.to_numeric(df['EstimatedSalary'], errors='coerce')
df_valid['Cred_Bal_Sal'] = pd.to_numeric(df_valid['Cred_Bal_Sal'], errors='coerce')  # coerce errors will convert non-numeric values to NaN
df_valid['Bal_sal'] = pd.to_numeric(df_valid['Bal_sal'], errors='coerce')
df_valid['Tenure_Age'] = pd.to_numeric(df_valid['Tenure_Age'], errors='coerce')
df_valid['EstimatedSalary'] = pd.to_numeric(df_valid['EstimatedSalary'], errors='coerce')
df['Cred_Bal_Sal']= df['CreditScore']*df['Balance']/df['EstimatedSalary']

X = df.drop(columns=['Exited', 'Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4'])
y = df['Exited']
X_valid = df_valid.drop(columns=['Exited', 'Surname_tfidf_0', 'Surname_tfidf_1', 'Surname_tfidf_3', 'Surname_tfidf_2', 'Surname_tfidf_4'])
y_valid = df_valid['Exited']
X_train, y_train = X, y
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X)
X_test_scaled = scaler.transform(X_valid)
model = CatBoostClassifier(max_depth=6, iterations=400, l2_leaf_reg=3, learning_rate=0.1)
model.fit(X_train_scaled, y_train)
t1 = time.time()
y_pred = model.predict(X_test_scaled)
t2 = time.time() - t1
print("Prediction time: " + str(t2))
print("Accuracy:", accuracy_score(y_valid, y_pred))
print(classification_report(y_valid, y_pred))