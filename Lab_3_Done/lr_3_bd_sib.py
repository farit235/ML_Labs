# -*- coding: utf-8 -*-
"""LR_3_BD_sib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cWowNi8kFJlq_FSqVMQmeJaWxtPaOHG2
"""

from zipfile import ZipFile
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import tensorflow as tf
from PIL import Image
import os
import keras
import time
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.preprocessing import LabelEncoder

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !wget -O Medical_train.zip https://www.dropbox.com/scl/fi/x6hifnqqkuq1p33vr109s/Medical_train.zip?rlkey=vr1ob1xmj5bkfa2r21ef5uwnd&dl=0
# !wget -O Medical_test.zip https://www.dropbox.com/scl/fi/8n9q6au9qcnpiwtwtojkm/Medical_test.zip?rlkey=j42oncxl79hp0uvgz3gz66ev4&dl=0
# !wget -O Medical_val.zip https://www.dropbox.com/scl/fi/a17q72jelw3j7svdhsuiq/Medical_val.zip?rlkey=jo2bagqzwvq7uol2hw5lpjzmz&dl=0

zip_train = ZipFile('Medical_train.zip')
zip_train.extractall()
zip_val = ZipFile('Medical_val.zip')
zip_val.extractall()
zip_test = ZipFile('Medical_test.zip')
zip_test.extractall()

data_dir = '/content/'
train_path = '/content/Medical_train'
val_path = '/content/Medical_val'

height = 30
width = 30
channels = 1

data = []
labels = []
NUM_CATEGORIES = len(os.listdir(train_path))
NUM_CATEGORIES

LIST_CATEGORIES=os.listdir('/content/Medical_train/')
print(LIST_CATEGORIES)

def image_converter(data_path):
    label_encoder = LabelEncoder()
    new_image = []
    new_labels = []
    for folder_name in LIST_CATEGORIES:
        path = os.path.join(data_path, folder_name)
        images = os.listdir(path)
        for a in images:
            image = Image.open(path + '/' + a)  # Конвертируем изображение в черно-белое
            image = image.resize((height, width))
            image = np.array(image)
            new_image.append(image)
            new_labels.append(folder_name)
    new_image = np.array(new_image)
    new_image = np.expand_dims(new_image, axis=-1)
    new_image = new_image / 255.0

    new_labels = np.array(new_labels)
    new_labels = label_encoder.fit_transform(new_labels)
    NUM_CATEGORIES = len(np.unique(new_labels))
    new_labels = to_categorical(new_labels, NUM_CATEGORIES)
    return new_image, new_labels

train_data, train_labels = image_converter('/content/Medical_train')
val_data, val_labels = image_converter('/content/Medical_val')
test_data, test_labels = image_converter('/content/Medical_test')

model = Sequential()

model.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(height,width,1)))
model.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(rate=0.5))
model.add(Dense(NUM_CATEGORIES, activation='softmax'))
model.summary()

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

aug = ImageDataGenerator(
    rotation_range=10,
    zoom_range=0.15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.15,
    horizontal_flip=False,
    vertical_flip=False,
    fill_mode="nearest")

batch_size = 32
epochs = 8

history = model.fit(aug.flow(train_data,train_labels,batch_size=batch_size),
                    epochs=epochs, validation_data=(val_data, val_labels) )

plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

start_time = time.time()
predict = model.predict(test_data)
end_time = time.time()

predict = np.argmax(predict, axis=1)
print(f"Time taken for prediction: {end_time - start_time} seconds")

from sklearn.metrics import accuracy_score
test_argmax = np.argmax(test_labels, axis=1)
print('Test Data accuracy: ', accuracy_score(test_argmax, predict)*100)